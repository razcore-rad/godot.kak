:kak-lsp-configure-godot: https://github.com/kak-lsp/kak-lsp/wiki/How-to-install-servers#gdscript-godot
:kak-lsp-website: https://github.com/kak-lsp/kak-lsp/
:godot-website: https://godotengine.org
:kakoune-website: https://kakoune.org
:gettext-website: https://www.gnu.org/software/gettext/

= godot.kak

Prototype and develop link:{godot-website}[Godot] projects from link:{kakoune-website}[Kakoune].

With this plugin we can run Godot scene files (`*.tscn`) directly from link:{kakoune-website}[Kakoune].

== Usage

This plugin adds the following commands:

- `:godot` which calls Godot with the selected scene file from the completion list.
- `:godot-current` which calls the `:godot` command with a scene file derived from the current buffer file name.

== Configuration

The `:godot` command expects to find the `godot` executable in your `$PATH` environment variable by default. You can change this behavior with the `godot_executable` option, for example:

-------------------------------------------------------------
set-option global godot_executable "path_to_godot_executable"
-------------------------------------------------------------

For further tweaks we have the `godot_arguments` `str-list` option which is populated with the `--debug` argument by default.

-------------------------------------------------------------
set-option global godot_arguments "--argument" ["--argument"]
-------------------------------------------------------------

The default command we invoke is `godot --path PATH_TO_GODOT_PROJECT_INFERED_FROM_PATH_TO_SCENE_FILE --debug PATH_TO_SCENE_FILE`.

The `--path PATH_TO_GODOT_PROJECT_INFERED_FROM_PATH_TO_SCENE_FILE` string is always passed to the Godot executable so we can run scene files even if the current path we're working from is outside the Godot project directory.

For example, we can:

- Say we start with the current working directory at `$HOME`.
- We open an arbitrary GDScript file location, say `kak $HOME/Projects/godot_awesome_project/awesome.gd`.
- In Kakoune, we run the `:godot-current` command.
- We now get to run the `$HOME/Projects/godot_awesome_project/awesome.tscn` scene file (if it exists) even if we didn't start in `$HOME/Projects/godot_awesome_project`.

On launching the selected scene file, Godot's output will become accessible in a FIFO buffer called `\*godot*`. Deleting this buffer will result in closing the opened Godot scene file as well.

You can invoke the plugin commands with user defined keyboard shortcuts for fast access, for example:

-------------------------------------------------------------
map -docstring "run a Godot scene file from the completion list" global user g ": godot "
map -docstring "try runing a Godot scene file based on the current buffer file name" global user G ": godot-current<ret>"
-------------------------------------------------------------

For temporary flags we can also pass extra arguments to the `:godot` command after the scene file, e.g.:

-------------------------------------------------------------
:godot ./dbg.tscn --debug-collisions --debug-navigation
-------------------------------------------------------------

Which translates to this shell call:

-------------------------------------------------------------
godot --path PATH_TO_GODOT_PROJECT_INFERED_FROM_PATH_TO_SCENE_FILE --debug --debug-collisions --debug-navigation PATH_TO_SCENE_FILE
-------------------------------------------------------------

== Dependencies

- The link:{godot-website}[Godot] game engine.
- The link:{gettext-website}[gettext] package.

== Notes

For a productive experience install the link:{kak-lsp-website}[Kakoune Language Server Protocol Client] and link:{kak-lsp-configure-godot}[configure it to communicate with Godot].
